name: "grocery-aid"
services:
  mysql:
    image: mysql:8.3
    environment:
      - MYSQL_ROOT_PASSWORD=${SQL_ROOT_PWD}
      - MYSQL_USER=${SQL_USER}
      - MYSQL_PASSWORD=${SQL_PWD}
      - MYSQL_FILL_EXAMPLE_DATA=${FILL_EXAMPLE_DATA}
    expose:
      - 3306
    restart: unless-stopped
    volumes:
      - mysql-data:/var/lib/mysql
      - ./datasets:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysql", "-u", "root", "-p$SQL_ROOT_PWD", "-h", "localhost", "-e", "use DOCKER_DB_READY;"]
      start_period: 120s
      start_interval: 1s

  redis:
    image: redis:7.2
    environment:
      - REDIS_PASSWORD=${REDIS_PWD}
    expose:
      - 6379
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "$REDIS_PWD"]
    volumes:
      - redis-cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 10s
      start_interval: 1s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - PORT=80
      - USE_HTTPS_COOKIES=${USE_HTTPS_COOKIES}
      - TRUST_PROXY_COUNT=${TRUST_PROXY_COUNT}
      - SQL_HOST=mysql
      - SQL_USER=${SQL_USER}
      - SQL_PWD=${SQL_PWD}
      - REDIS_URL=redis://default:${REDIS_PWD}@redis
    expose:
      - 80
    restart: unless-stopped
    volumes:
      - logs:/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "printf \"GET /docker_healthcheck HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/80; echo $?;"]
      start_period: 10s
      start_interval: 1s

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - 80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "printf \"GET /docker_healthcheck HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/80; echo $?;"]
      start_period: 10s
      start_interval: 1s

  nginx:
    image: nginx:1.25
    ports:
      - ${APP_PORT}:80
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    command: [nginx-debug, '-g', 'daemon off;']
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

volumes:
  mysql-data:
  redis-cache:
  logs: